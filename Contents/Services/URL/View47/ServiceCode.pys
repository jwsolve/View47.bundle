########################################################################################
def NormalizeURL(url):

	return url

########################################################################################
def MetadataObjectForURL(url):

	page = HTML.ElementFromURL(url)

	title = page.xpath("//title/text()")[0].replace(' | View47.Com','',1)
	description = page.xpath("//div[@class='info-txt']/p/text()")[0]
	thumb = page.xpath("//div[@class='poster']/a/img/@src")[0]
	director = page.xpath("//dl[1]/dd[1]/a/text()")
	imdb_rating = page.xpath("//dl[2]/dd[4]/text()")[0]

	try:
		return VideoClipObject(
			title = title,
			summary = description,
			directors = director,
			rating = float(imdb_rating),
			thumb = thumb
		)
	except:
		return VideoClipObject(
			title = title,
			summary = description,
			directors = director,
			thumb = thumb
		)

########################################################################################
def MediaObjectsForURL(url):

	return [
        	MediaObject(
			parts = [
				PartObject(
					key = 
						Callback(
							PlayVideo,
							url = url,
							fmt = 'hi',
							post_url=url
						)
					)
				],
			video_resolution = resolution,
			bitrate = bitrate,
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
			) for resolution, bitrate in [('1080', 3000), ('720', 1500), ('360', 750)]
	]

########################################################################################
@indirect
def PlayVideo(url, fmt):


	html = HTTP.Request(url).content
	video_url = Regex('file:\t"([^"]+)"').search(html).groups()[0]

	return IndirectResponse(VideoClipObject, key=video_url)
